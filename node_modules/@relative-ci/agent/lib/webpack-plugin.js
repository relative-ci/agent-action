"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RelativeCiAgentWebpackPlugin = void 0;

require("core-js/modules/es.promise.js");

var _process = _interopRequireDefault(require("process"));

var _webpack = _interopRequireDefault(require("webpack"));

var _lodash = require("lodash");

var _pluginWebpackValidate = _interopRequireDefault(require("@bundle-stats/plugin-webpack-validate"));

var _agent = require("./agent");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PLUGIN_NAME = 'RelativeCiAgent';
const DEFAULT_OPTIONS = {
  includeCommitMessage: true,
  payloadFilepath: null,
  stats: {
    context: _process.default.cwd(),
    assets: true,
    entrypoints: true,
    chunks: true,
    modules: true
  }
};
const isWebpack5 = parseInt(_webpack.default.version, 10) === 5;

const sendStats = async (compilation, options) => {
  const {
    stats: statsOptions,
    ...config
  } = options;
  const data = compilation.getStats().toJson(statsOptions);
  const logger = compilation.getInfrastructureLogger ? compilation.getInfrastructureLogger(PLUGIN_NAME) : console;
  const invalidData = (0, _pluginWebpackValidate.default)(data);

  if (invalidData) {
    logger.warn(invalidData);
    return;
  }

  (0, _agent.agent)([{
    key: 'webpack.stats',
    data
  }], config, undefined, logger);
};

class RelativeCiAgentWebpackPlugin {
  constructor(options) {
    this.options = options;
  }

  apply(compiler) {
    const {
      isCi
    } = (0, _utils.getEnvCI)();
    const options = (0, _lodash.merge)({}, DEFAULT_OPTIONS, {
      enabled: isCi,
      stats: {
        context: (0, _lodash.get)(compiler, 'options.context')
      }
    }, this.options);
    (0, _utils.debug)(options); // Skip if not enabled

    if (!options.enabled) {
      (0, _utils.debug)(`${PLUGIN_NAME} is disabled, skip sending data`);
      return;
    }

    if (isWebpack5) {
      compiler.hooks.make.tap(PLUGIN_NAME, compilation => {
        compilation.hooks.processAssets.tap({
          name: PLUGIN_NAME,
          stage: _webpack.default.Compilation.PROCESS_ASSETS_STAGE_REPORT
        }, () => sendStats(compilation, options));
      });
      return;
    }

    compiler.hooks.emit.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
      await sendStats(compilation, options);
      callback();
    });
  }

}

exports.RelativeCiAgentWebpackPlugin = RelativeCiAgentWebpackPlugin;