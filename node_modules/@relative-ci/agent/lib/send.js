"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es.promise.js");

var _fs = _interopRequireDefault(require("fs"));

var _lodash = require("lodash");

var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));

var _en = _interopRequireDefault(require("../locales/en"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = async (data, params, config, logger) => {
  const {
    key,
    endpoint,
    branch,
    build,
    buildUrl,
    commit,
    pr,
    slug,
    service,
    commitMessage,
    agentVersion
  } = params;
  const payload = {
    key,
    project: slug,
    service,
    job: {
      commit,
      branch,
      prNumber: pr,
      buildNumber: build,
      buildUrl,
      commitMessage
    },
    rawData: data,
    agentVersion
  };
  const {
    payloadFilepath
  } = config;
  (0, _utils.debug)('Payload', payload);
  (0, _utils.debug)('Payload size', Buffer.byteLength(JSON.stringify(payload)));

  if (payloadFilepath) {
    logger.info('Save payload to', payloadFilepath);

    try {
      // Obfuscate private data
      const output = { ...payload,
        key: '***'
      };

      _fs.default.writeFileSync(payloadFilepath, JSON.stringify(output, null, 2));
    } catch (err) {
      logger.warn('Error saving payload', err.message);
    }
  }

  logger.info('Send stats to RelativeCI', `branch=${branch}`, `commit=${commit}`);

  try {
    const response = await (0, _isomorphicFetch.default)(endpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json; charset=utf-8'
      },
      body: JSON.stringify(payload)
    });
    const responseData = await response.json();
    (0, _utils.debug)('Response', responseData);

    if (responseData.code) {
      logger.warn(responseData);
      return;
    }

    const {
      res
    } = responseData;

    if (!res) {
      logger.warn(_en.default.GENERIC_ERROR, responseData);
      return;
    }

    const buildNumber = (0, _lodash.get)(res, 'job.internalBuildNumber');
    const buildSizeInfo = (0, _lodash.get)(responseData, 'info.message.txt');
    logger.info(`Job #${buildNumber} done.`);
    logger.info(buildSizeInfo);
  } catch (err) {
    logger.warn(err.message);
    (0, _utils.debug)('@relative-ci/agent could not send the data', err);
  }
};

exports.default = _default;