"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.agent = void 0;
var _dotenv = _interopRequireDefault(require("dotenv"));
var _lodash = require("lodash");
var _pluginWebpackFilter = _interopRequireDefault(require("@bundle-stats/plugin-webpack-filter"));
var _package = _interopRequireDefault(require("../package.json"));
var LOCALES = _interopRequireWildcard(require("../locales/en"));
var _send = _interopRequireDefault(require("./send"));
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * @typedef {import('../').AgentConfig} AgentConfig
 * @typedef {import('../').AgentArgs} AgentArgs
 * @typedef {import('../').EnvVars} EnvVars
 */

const WEBPACK_STATS = 'webpack.stats';
const SOURCE_EXTRACTORS = {
  [WEBPACK_STATS]: _pluginWebpackFilter.default
};
const getFilteredData = artifactsData => artifactsData.reduce((agg, {
  key,
  data,
  options
}) => (0, _lodash.set)(agg, key, SOURCE_EXTRACTORS[key](data, options)), {});

/**
 * @param {Array<object>} artifactsData
 * @param {AgentConfig} config
 * @param {AgentArgs} [args]
 * @param {Console} [logger]
 * @return {void|Promise<void>}
 */
const agent = (artifactsData, config, args = {}, logger = console) => {
  _dotenv.default.config();
  const envVars = (0, _utils.getEnvVars)();

  // Normalized params - merge provided args with env vars
  // @type {EnvVars}
  const normalizedParams = {
    slug: args.slug || envVars.slug,
    branch: args.branch || envVars.branch,
    pr: args.pr || envVars.pr,
    commit: args.commit || envVars.commit,
    build: envVars.build,
    buildUrl: envVars.buildUrl,
    isCi: envVars.isCi,
    service: envVars.service,
    commitMessage: args.commitMessage || envVars.commitMessage,
    key: envVars.key,
    endpoint: envVars.endpoint
  };
  (0, _utils.debug)('normalized parameters - agent configuration with environmental variables fallback', (0, _utils.maskObjectProperties)(normalizedParams, ['key']));
  const {
    includeCommitMessage
  } = config;
  const params = {
    agentVersion: _package.default.version,
    ...normalizedParams,
    // Get commit message using git if includeCommitMessage is set and
    // there is no --commit-message argument or RELATIVE_CI_COMMIT_MESSAGE
    ...(includeCommitMessage && !normalizedParams.commitMessage && {
      commitMessage: (0, _utils.getCommitMessage)()
    })
  };
  (0, _utils.debug)('job parameters', (0, _utils.maskObjectProperties)(params, ['key']));

  // Validate parameters
  if (!params.key) {
    return logger.warn(LOCALES.AGENT_MISSING_KEY_ERROR);
  }
  if (!params.slug) {
    return logger.warn(LOCALES.AGENT_MISSING_SLUG_ERROR);
  }
  if (!params.commit) {
    return logger.warn(LOCALES.AGENT_MISSING_COMMIT_ERROR);
  }
  if (!params.branch) {
    return logger.warn(LOCALES.AGENT_MISSING_BRANCH_ERROR);
  }

  // Filter only the necessary data
  const filteredData = getFilteredData(artifactsData);
  return (0, _send.default)(filteredData, params, config, logger);
};
exports.agent = agent;