'use strict';

var index = require('../__/env-ci/index.js');
var debug = require('./debug.js');
var maskObjectProperty = require('./mask-object-property.js');
var getSlug = require('./get-slug.js');

// env-ci and its dependencies are not flagged as external (not bundled)
// eslint-disable-next-line import/no-extraneous-dependencies
function getEnvVarValue(envVars, envVarName) {
    const name = envVarName;
    if (!envVars[name]) {
        return undefined;
    }
    return envVars[name];
}
/**
 * Load environment variables - fallback to env-ci environment variables
 */
function getEnvVars() {
    // CI environment variables
    const ciEnvVars = index();
    debug.debug('CI environment variables', ciEnvVars);
    // RelativeCI environment variables
    const customEnvVars = {
        key: process.env.RELATIVE_CI_KEY,
        endpoint: process.env.RELATIVE_CI_ENDPOINT,
        service: process.env.RELATIVE_CI_SERVICE,
        slug: process.env.RELATIVE_CI_SLUG,
        branch: process.env.RELATIVE_CI_BRANCH,
        pr: process.env.RELATIVE_CI_PR,
        build: process.env.RELATIVE_CI_BUILD,
        buildUrl: process.env.RELATIVE_CI_BUILD_URL,
        commit: process.env.RELATIVE_CI_COMMIT,
        commitMessage: process.env.RELATIVE_CI_COMMIT_MESSAGE,
    };
    debug.debug('RELATIVE_CI environment variables', maskObjectProperty.maskObjectProperties(customEnvVars, ['key']));
    const resolvedEnvVars = {
        isCi: ciEnvVars.isCi,
        key: customEnvVars.key,
        endpoint: customEnvVars.endpoint,
        service: customEnvVars.service || getEnvVarValue(ciEnvVars, 'service'),
        slug: customEnvVars.slug || getSlug.getSlug(ciEnvVars),
        branch: customEnvVars.branch || getEnvVarValue(ciEnvVars, 'prBranch') || getEnvVarValue(ciEnvVars, 'branch'),
        pr: customEnvVars.pr || getEnvVarValue(ciEnvVars, 'pr'),
        build: customEnvVars.build || getEnvVarValue(ciEnvVars, 'build'),
        buildUrl: customEnvVars.buildUrl || getEnvVarValue(ciEnvVars, 'buildUrl'),
        commit: customEnvVars.commit || ciEnvVars.commit,
        commitMessage: customEnvVars.commitMessage,
    };
    debug.debug('Environment variables', maskObjectProperty.maskObjectProperties(resolvedEnvVars, ['key']));
    return resolvedEnvVars;
}

exports.getEnvVars = getEnvVars;
//# sourceMappingURL=get-env-vars.js.map
