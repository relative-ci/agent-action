'use strict';

var appveyor = require('./services/appveyor.js');
var azurePipelines = require('./services/azure-pipelines.js');
var bamboo = require('./services/bamboo.js');
var bitbucket = require('./services/bitbucket.js');
var bitrise = require('./services/bitrise.js');
var buddy = require('./services/buddy.js');
var buildkite = require('./services/buildkite.js');
var circleci = require('./services/circleci.js');
var cirrus = require('./services/cirrus.js');
var cloudflarePages = require('./services/cloudflare-pages.js');
var codebuild = require('./services/codebuild.js');
var codefresh = require('./services/codefresh.js');
var codeship = require('./services/codeship.js');
var drone = require('./services/drone.js');
var git = require('./services/git.js');
var github = require('./services/github.js');
var gitlab = require('./services/gitlab.js');
var jenkins = require('./services/jenkins.js');
var netlify = require('./services/netlify.js');
var puppet = require('./services/puppet.js');
var sail = require('./services/sail.js');
var screwdriver = require('./services/screwdriver.js');
var scrutinizer = require('./services/scrutinizer.js');
var semaphore = require('./services/semaphore.js');
var shippable = require('./services/shippable.js');
var teamcity = require('./services/teamcity.js');
var travis = require('./services/travis.js');
var vela = require('./services/vela.js');
var vercel = require('./services/vercel.js');
var wercker = require('./services/wercker.js');
var woodpecker = require('./services/woodpecker.js');
var jetbrainsSpace = require('./services/jetbrains-space.js');

const services = {
  appveyor,
  azurePipelines,
  bamboo,
  bitbucket,
  bitrise,
  buddy,
  buildkite,
  circleci,
  cirrus,
  cloudflarePages,
  codebuild,
  codefresh,
  codeship,
  drone,
  github,
  gitlab,
  jenkins,
  netlify,
  puppet,
  sail,
  screwdriver,
  scrutinizer,
  semaphore,
  shippable,
  teamcity,
  travis,
  vela,
  vercel,
  wercker,
  woodpecker,
  jetbrainsSpace,
};

var envCi = ({ env = process.env, cwd = process.cwd() } = {}) => {
  for (const name of Object.keys(services)) {
    if (services[name].detect({ env, cwd })) {
      return { isCi: true, ...services[name].configuration({ env, cwd }) };
    }
  }

  return { isCi: Boolean(env.CI), ...git.configuration({ env, cwd }) };
};

module.exports = envCi;
//# sourceMappingURL=index.js.map
