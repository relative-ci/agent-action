{"version":3,"file":"parse.js","sources":["../../../../../../../node_modules/cross-spawn/lib/parse.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst resolveCommand = require('./util/resolveCommand');\nconst escape = require('./util/escape');\nconst readShebang = require('./util/readShebang');\n\nconst isWin = process.platform === 'win32';\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\n\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n\n    const shebang = parsed.file && readShebang(parsed.file);\n\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n\n        return resolveCommand(parsed);\n    }\n\n    return parsed.file;\n}\n\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg) => escape.argument(arg, needsDoubleEscapeMetaChars));\n\n        const shellCommand = [parsed.command].concat(parsed.args).join(' ');\n\n        parsed.args = ['/d', '/s', '/c', `\"${shellCommand}\"`];\n        parsed.command = process.env.comspec || 'cmd.exe';\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n\n    return parsed;\n}\n\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args,\n        },\n    };\n\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\n\nmodule.exports = parse;\n"],"names":["require$$0","resolveCommand","require$$1","escape","require$$2","readShebang","require$$3"],"mappings":"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","x_google_ignoreList":[0]}