{"version":3,"file":"resolveCommand.js","sources":["../../../../../../../../node_modules/cross-spawn/lib/util/resolveCommand.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst which = require('which');\nconst getPathKey = require('path-key');\n\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;\n\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n            /* Empty */\n        }\n    }\n\n    let resolved;\n\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({ env })],\n            pathExt: withoutPathExt ? path.delimiter : undefined,\n        });\n    } catch (e) {\n        /* Empty */\n    } finally {\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);\n    }\n\n    return resolved;\n}\n\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\n\nmodule.exports = resolveCommand;\n"],"names":["require$$0","which","require$$1","require$$2"],"mappings":";;;;;;;;;;;;;;;;;CAEA,MAAM,IAAI,GAAGA,qBAAe;CAC5B,MAAMC,OAAK,GAAGC,eAAgB,EAAA;CAC9B,MAAM,UAAU,GAAGC,eAAmB,EAAA;;AAEtC,CAAA,SAAS,qBAAqB,CAAC,MAAM,EAAE,cAAc,EAAE;KACnD,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG;AACjD,KAAI,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE;KACzB,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI;AACnD;AACA,KAAI,MAAM,eAAe,GAAG,YAAY,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ;;AAElG;AACA;KACI,IAAI,eAAe,EAAE;AACzB,SAAQ,IAAI;aACA,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC;UACpC,CAAC,OAAO,GAAG,EAAE;AACtB;AACA;AACA;;AAEA,KAAI,IAAI,QAAQ;;AAEhB,KAAI,IAAI;SACA,QAAQ,GAAGF,OAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;aAClC,IAAI,EAAE,GAAG,CAAC,UAAU,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;aAC9B,OAAO,EAAE,cAAc,GAAG,IAAI,CAAC,SAAS,GAAG,SAAS;AAChE,UAAS,CAAC;MACL,CAAC,OAAO,CAAC,EAAE;AAChB;AACA,MAAK,SAAS;SACN,IAAI,eAAe,EAAE;AAC7B,aAAY,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;AAC9B;AACA;;AAEA;AACA;KACI,IAAI,QAAQ,EAAE;AAClB,SAAQ,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,EAAE,EAAE,QAAQ,CAAC;AACjF;;AAEA,KAAI,OAAO,QAAQ;AACnB;;CAEA,SAAS,cAAc,CAAC,MAAM,EAAE;KAC5B,OAAO,qBAAqB,CAAC,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,EAAE,IAAI,CAAC;AAC/E;;AAEA,CAAA,gBAAc,GAAG,cAAc;;;;;;","x_google_ignoreList":[0]}