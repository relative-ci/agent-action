'use strict';

var locales_en = require('../locales/en.js');
var constants = require('../constants.js');
var debug = require('../utils/debug.js');
var logger = require('../utils/logger.js');
var maskObjectProperty = require('../utils/mask-object-property.js');
var commitMessage = require('./git/commit-message.js');
var agentEnv = require('./agent-env.js');
var ciEnv = require('./ci-env.js');

/**
 * Load and normalize ingest params based on:
 * 1. plugin arguments
 * 2. agent env vars (RELATIVE_CI_*)
 * 3. env-ci fallback
 * 4. computed values
 */
async function loadEnv(args, config = {}, logger$1 = logger.logger) {
    const { includeCommitMessage = true } = config;
    const ciEnv$1 = await ciEnv.getCiEnv({ includeCommitMessage }, logger$1);
    debug.debug('CI env', ciEnv$1);
    const agentEnv$1 = agentEnv.getAgentEnv();
    debug.debug('RELATIVE_CI env', maskObjectProperty.maskObjectProperties(agentEnv$1, ['key']));
    const params = {
        isCi: ciEnv$1.isCi,
        agentVersion: "5.1.0-beta.0",
        agentType: args.agentType,
        key: agentEnv$1.key,
        endpoint: agentEnv$1.endpoint || constants.DEFAULT_ENDPOINT,
        service: agentEnv$1.service || ciEnv$1.service,
        slug: args.slug || agentEnv$1.slug || ciEnv$1.slug,
        branch: args.branch || agentEnv$1.branch || ciEnv$1.branch,
        baseBranch: ciEnv$1.baseBranch,
        pr: args.pr || agentEnv$1.pr || ciEnv$1.pr,
        commit: args.commit || agentEnv$1.commit || ciEnv$1.commit,
        commitMessage: args.commitMessage || agentEnv$1.commitMessage || ciEnv$1.commitMessage,
        build: agentEnv$1.build || ciEnv$1.build,
        buildUrl: agentEnv$1.buildUrl || ciEnv$1.buildUrl,
    };
    /**
     * Get commit message using git if includeCommitMessage is set and
     * the commitMessage plugin argument is missing
     */
    if (!params.commitMessage && includeCommitMessage) {
        params.commitMessage = commitMessage.getGitCommitMessage();
    }
    debug.debug('Env', maskObjectProperty.maskObjectProperties(params, ['key']));
    // Validate required parameters
    if (!params.key) {
        throw new Error(locales_en.AGENT_MISSING_KEY_ERROR);
    }
    if (!params.slug) {
        throw new Error(locales_en.AGENT_MISSING_SLUG_ERROR);
    }
    if (!params.commit) {
        throw new Error(locales_en.AGENT_MISSING_COMMIT_ERROR);
    }
    if (!params.branch) {
        throw new Error(locales_en.AGENT_MISSING_BRANCH_ERROR);
    }
    // Explicitly pass required props to allow ts to infer correctly
    return {
        ...params,
        key: params.key,
        slug: params.slug,
        branch: params.branch,
        commit: params.commit,
    };
}

exports.loadEnv = loadEnv;
//# sourceMappingURL=load.js.map
