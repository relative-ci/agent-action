/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/************************************************************************/

;// external "@actions/core"
const core_namespaceObject = require("@actions/core");
;// external "@actions/github"
const github_namespaceObject = require("@actions/github");
;// external "@relative-ci/core/ingest"
const ingest_namespaceObject = require("@relative-ci/core/ingest");
var ingest_default = /*#__PURE__*/__webpack_require__.n(ingest_namespaceObject);
;// external "@relative-ci/core/artifacts"
const artifacts_namespaceObject = require("@relative-ci/core/artifacts");
;// external "@relative-ci/core/env"
const env_namespaceObject = require("@relative-ci/core/env");
var env_default = /*#__PURE__*/__webpack_require__.n(env_namespaceObject);
;// external "@relative-ci/core/utils"
const utils_namespaceObject = require("@relative-ci/core/utils");
;// external "util"
const external_util_namespaceObject = require("util");
;// external "path"
const external_path_namespaceObject = require("path");
;// external "fs"
const external_fs_namespaceObject = require("fs");
;// external "adm-zip"
const external_adm_zip_namespaceObject = require("adm-zip");
;// ./utils.ts

const logger = {
  log: core_namespaceObject.info,
  debug: core_namespaceObject.debug,
  info: core_namespaceObject.info,
  warn: core_namespaceObject.warning,
  error: core_namespaceObject.error
};
async function getGitHubCommitMessage(params) {
  const {
    octokit,
    owner,
    repo,
    ref
  } = params;
  logger.debug(`Fetching commit message`);
  let commitMessage;
  try {
    const res = await octokit.rest.repos.getCommit({
      owner,
      repo,
      ref
    });
    commitMessage = res?.data?.commit?.message;
  } catch (err) {
    logger.debug(`Error fetching commit message: ${err.message}`);
    logger.warn(err);
  }
  return commitMessage;
}
function getSummary({
  title,
  url
}) {
  const output = [`## ${title}`, `[View bundle analysis report](${url}?utm_source=github&utm_campaign=github-action-summary)`, '---', `<sup>Generated by [RelativeCI](https://relative-ci.com/?utm_source=github&utm_campaign=github-action-summary)</sup>`];
  return output.join('\n\n');
}
;// ./artifacts.ts






const DEFAULT_ARTIFACT_NAME = 'relative-ci-artifacts';
const DEFAULT_ARTIFACT_WEBPACK_STATS_FILE = 'webpack-stats.json';
async function getWebpackStatsFromFile(basedir, filepath) {
  const readFile = (0,external_util_namespaceObject.promisify)(external_fs_namespaceObject.readFile);
  const absoluteFilepath = external_path_namespaceObject.join(basedir, filepath);
  logger.debug(`Read webpack stats from ${absoluteFilepath}`);
  const jsonData = await readFile(absoluteFilepath, 'utf-8');
  return JSON.parse(jsonData);
}
async function getWebpackStatsFromArtifact(token, inputArtifactName, inputArtifactWebpackStatsFile) {
  const artifactName = inputArtifactName || DEFAULT_ARTIFACT_NAME;
  const artifactWebpackStatsFile = inputArtifactWebpackStatsFile || DEFAULT_ARTIFACT_WEBPACK_STATS_FILE;
  logger.debug(`Extract webpack stats from '${artifactName}/${artifactWebpackStatsFile}' `);
  const {
    context
  } = github_namespaceObject;
  const runId = context?.payload?.workflow_run?.id;
  if (!runId) {
    throw new Error(`Worflow 'runId' is missing! Please make sure your worklow is set up correctly.`);
  }
  const api = github_namespaceObject.getOctokit(token);
  const workflowRunArtifactsParams = {
    owner: context.repo.owner,
    repo: context.repo.repo,
    run_id: runId
  };
  logger.debug(`Download artifacts for ${JSON.stringify(workflowRunArtifactsParams)}`);
  const artifacts = await api.rest.actions.listWorkflowRunArtifacts(workflowRunArtifactsParams);
  const matchArtifact = artifacts?.data?.artifacts.find(artifact => artifact.name === artifactName);
  if (!matchArtifact) {
    throw new Error(`Artifact '${artifactName}' could not be found! Please make sure 'artifactName' is correct.`);
  }
  logger.debug(`Download artifact ${matchArtifact.id}`);
  const download = await api.rest.actions.downloadArtifact({
    owner: context.repo.owner,
    repo: context.repo.repo,
    artifact_id: matchArtifact.id,
    archive_format: 'zip'
  });
  if (!download) {
    throw new Error(`Artifact '${artifactName}(id: ${matchArtifact.id}) could not be downloaded. Please try again!`);
  }
  const zip = new external_adm_zip_namespaceObject(Buffer.from(download.data));
  logger.debug(`Read artifact '${artifactWebpackStatsFile}' from '${artifactName}' archive`);
  const webpackStats = zip.readAsText(artifactWebpackStatsFile, 'utf-8');
  if (!webpackStats) {
    throw new Error(`Unable to unzip '${artifactWebpackStatsFile}' from '${artifactName}' archive.
       Please make sure the value of 'webpackStatsFile' is correct.
    `);
  }
  return JSON.parse(webpackStats);
}
;// ./index.ts








const {
  ACTIONS_STEP_DEBUG,
  GITHUB_WORKSPACE
} = process.env;
async function run() {
  try {
    const token = core_namespaceObject.getInput('token');
    const key = core_namespaceObject.getInput('key');
    const slug = core_namespaceObject.getInput('slug');
    const endpoint = core_namespaceObject.getInput('endpoint');
    const includeCommitMessage = core_namespaceObject.getInput('includeCommitMessage') === 'true';
    const webpackStatsFile = core_namespaceObject.getInput('webpackStatsFile');
    const artifactName = core_namespaceObject.getInput('artifactName');
    const debug = core_namespaceObject.getInput('debug') === 'true';
    const {
      eventName
    } = github_namespaceObject.context;
    // Enable debugging for debug input or ACTIONS_STEP_DEBUG is set
    if (debug || ACTIONS_STEP_DEBUG) {
      process.env.DEBUG = 'relative-ci:agent';
    }
    // Extract params
    process.env.RELATIVE_CI_KEY = key;
    process.env.RELATIVE_CI_SLUG = slug;
    process.env.RELATIVE_CI_ENDPOINT = endpoint;
    const params = env_default()({
      agentType: 'github-action'
    }, {
      includeCommitMessage
    });
    logger.debug(`Agent params: ${JSON.stringify(params)}`);
    /**
     * Read JSON from the current job or download it from another job's artifact
     */
    let webpackStats = {};
    // Get webpack stats file from an artifact
    if (eventName === 'workflow_run') {
      webpackStats = await getWebpackStatsFromArtifact(token, artifactName, webpackStatsFile);
      // Get webpack stats from a file
    } else {
      if (!webpackStatsFile) {
        throw new Error('`webpackStatsFile` input is required!');
      }
      webpackStats = await getWebpackStatsFromFile(GITHUB_WORKSPACE, webpackStatsFile);
    }
    (0,artifacts_namespaceObject.validateWebpackStats)(webpackStats);
    // Filter artifacts
    const data = (0,artifacts_namespaceObject.filterArtifacts)([{
      key: 'webpack.stats',
      data: webpackStats
    }]);
    // Send data to RelativeCI
    const response = await ingest_default()(data, params, undefined, logger);
    // Output summary
    const summary = getSummary({
      title: response.info.message.txt,
      url: response.reportUrl
    });
    await core_namespaceObject.summary.addRaw(summary).write();
    (0,utils_namespaceObject.logResponse)(response, logger);
  } catch (error) {
    core_namespaceObject.setFailed(error);
  }
}
run();
/******/ })()
;